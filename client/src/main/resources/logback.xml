<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 -->
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds">


    <contextName>logback</contextName>

    <!-- 通过property标签,来存放key-value数据,通过定义的值会被插入到logger上下文中。定义变量后，可以使“${}”来使用变量。 -->
    <property name="log.path" value="D:/mylog/"/>

    <property name="consoleFormat" value="%d HH:mm:ss.SSS [%thread] %-5level %logger{36}:%L- %msg%n"/>

        <!-- >>>>>>>>>>>>>>>>>>>>>>>>>配置appender(可以配置多个)>>>>>>>>>>>>>>>>>>>>>>>>> -->
    <!--
        name:自取即可,
        class:加载指定类(ch.qos.logback.core.ConsoleAppender类会将日志输出到>>>控制台),
        patter:指定输出的日志格式
    -->
    <!--输出到控制台-->
    <!--ConsoleAppender输出到控制台-->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <!--设定这个日志过滤级别-->
            <level>DEBUG</level>
        </filter>
        <encoder>
            <!-- patter:指定输出的日志格式-->
            <pattern>${consoleFormat}</pattern>
            <!-- 设置字符集 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>


    <!--输出到文件-->

    <!-- 时间滚动输出 level为 DEBUG 日志 -->
    <!--加载指定类(ch.qos.logback.core.rolling.RollingFileAppender类会将日志输出到>>>指定的文件中),-->
    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <!-- 把日志文件输出到:项目启动的目录下的log文件夹(无则自动创建)下 -->
        <file>${log.path}/log_debug.log</file>

        <!--日志文件输出格式-->
        <encoder>
            <pattern>%d HH:mm:ss.SSS [%thread] %-5level %logger{36}:%L- %msg%n</pattern>
            <charset>UTF-8</charset> <!-- 设置字符集 -->
        </encoder>


        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <!--FileNamePattern：文件的全路径名模板 (注:如果最后结尾是gz或者zip等的话,那么会自动打成相应压缩包) -->
            <fileNamePattern>${log.path}/debug/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>

            <!-- 滚动策略可以嵌套；
                  这里嵌套了一个SizeAndTimeBasedFNATP策略，主要目的是: 在每天都会拆分日志的前提下，
                     当该天的日志大于规定大小时，
                    也进行拆分并以【%i】进行区分，i从0开始
          -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>100MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>


            <!-- 设置过时时间(单位:<fileNamePattern>标签中%d里最小的时间单位) -->
            <!-- 系统会删除(分离出去了的)过时了的日志文件 -->
            <!-- 本人这里:保存以最后一次日志为准,往前7天以内的日志文件 -->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!-- 此日志文件只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>debug</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>


    <!-- >>>>>>>>>>>>>>>>>>>>>>>>>>>>>使用appender>>>>>>>>>>>>>>>>>>>>>>>>>>>>> -->
    <!--
           <logger>用来设置某一个包或者具体的某一个类的日志打印级别、
           以及指定<appender>。<logger>仅有一个name属性，
           一个可选的level和一个可选的addtivity属性。
           name:用来指定受此logger约束的某一个包或者具体的某一个类。
           level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
                 还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。
                 如果未设置此属性，那么当前logger将会继承上级的级别。
           addtivity:是否向上级logger传递打印信息。默认是true。
       -->
    <!--
        指定[哪个包]下使用[哪个appender],并设置 记录到日志文件中的日志的最下
        级别(低于次级别的日志信息不回输出记录到日志文件中)
        注:日志级别有: trace|debug|info|warn|error|fatal
        注:当有多处指定了要记录的日志的最下日志级别时，走优先级最高的，优先级:
           logback-spring.xml中 > 启动jar包时 > xxx.properties/xxx.yml中
    -->
    <!--
        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：
        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息
        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：
     -->
    <!--<logger name="com" level="trace">-->
    <!--这个会导致控制到打印两边-->
<!--    <logger name="com.example.sercurity.dao" level="debug">-->
<!--    </logger>-->

    <!--这个需要文件名最后 有spring-->
    <!--开发环境:打印控制台-->
    <!--   <springProfile name="dev">
           <logger name="com.nmys.view" level="debug"/>
       </springProfile>
   -->

    <!--
       root:logger的根节点,appender-ref:确定使用哪个appender,将日志信息显示在console
      注:如果不指定配置此项的话,那么SpringBoot启动后,将不会在console打印任何信息
      root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性

        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
        不能设置为INHERITED或者同义词NULL。默认是DEBUG.。这个权限是最高的。会拦截子元素中比它低的日志等级
   -->

        <root level="error">
            <appender-ref ref="CONSOLE"/>
            <appender-ref ref="DEBUG_FILE"/>
        </root>


</configuration>
